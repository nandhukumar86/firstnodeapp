import { BooleanInt, CrowdinApi, PatchRequest, ResponseList, ResponseObject } from '../core';
export declare class Tasks extends CrowdinApi {
    /**
     * @param projectId project identifier
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param status list tasks with specified statuses. It can be one status or a list of comma-separated status values
     */
    listTasks(projectId: number, limit?: number, offset?: number, status?: TasksModel.Status): Promise<ResponseList<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param request request body
     */
    addTask(projectId: number, request: TasksModel.CreateTaskRequest): Promise<ResponseObject<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     */
    getTask(projectId: number, taskId: number): Promise<ResponseObject<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     */
    deleteTask(projectId: number, taskId: number): Promise<void>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @param request request body
     */
    editTask(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.Task>>;
    /**
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param status list tasks with specified statuses. It can be one status or a list of comma-separated status values
     * @param isArchived list archived/not archived tasks for the authorized user. 1 - archived, 0 - not archived
     */
    listUserTasks(limit?: number, offset?: number, status?: TasksModel.Status, isArchived?: BooleanInt): Promise<ResponseList<TasksModel.UserTask>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @param request request body
     */
    editTaskArchivedStatus(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.UserTask>>;
}
export declare namespace TasksModel {
    interface Task {
        id: number;
        projectId: number;
        creatorId: number;
        type: Type;
        status: Status;
        title: string;
        assignees: Assignee[];
        fileIds: number[];
        progress: Progress;
        sourceLanguageId: string;
        targetLanguageId: string;
        description: string;
        hash: string;
        translationUrl: string;
        wordsCount: number;
        filesCount: number;
        commentsCount: number;
        deadline: string;
        timeRange: string;
        workflowStepId: number;
        createdAt: string;
        updatedAt: string;
    }
    interface UserTask extends Task {
        isArchived: boolean;
    }
    interface CreateTaskRequest {
        workflowStepId: number;
        status?: Status;
        title: string;
        description?: string;
        languageId: string;
        fileIds: number[];
        type: Type;
        splitFiles?: boolean;
        skipAssignedStrings?: boolean;
        skipUntranslatedStrings?: boolean;
        assignees?: Assignee[];
        deadline?: string;
        dateFrom?: string;
        dateTo?: string;
    }
    enum Status {
        TODO = "todo",
        IN_PROGRESS = "in_progress",
        DONE = "done",
        CLOSED = "closed"
    }
    enum Type {
        TRANSLATE = 0,
        PROOFREAD = 1
    }
    interface Assignee {
        id: number;
        wordsCount: number;
    }
    interface Progress {
        total: number;
        done: number;
        percent: number;
    }
}
