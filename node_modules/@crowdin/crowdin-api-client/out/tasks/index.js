"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../core");
class Tasks extends core_1.CrowdinApi {
    /**
     * @param projectId project identifier
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param status list tasks with specified statuses. It can be one status or a list of comma-separated status values
     */
    listTasks(projectId, limit, offset, status) {
        let url = `${this.url}/projects/${projectId}/tasks`;
        url = this.addQueryParam(url, 'status', status);
        return this.getList(url, limit, offset);
    }
    /**
     * @param projectId project identifier
     * @param request request body
     */
    addTask(projectId, request) {
        const url = `${this.url}/projects/${projectId}/tasks`;
        return this.post(url, request, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     */
    getTask(projectId, taskId) {
        const url = `${this.url}/projects/${projectId}/tasks/${taskId}`;
        return this.get(url, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     */
    deleteTask(projectId, taskId) {
        const url = `${this.url}/projects/${projectId}/tasks/${taskId}`;
        return this.delete(url, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @param request request body
     */
    editTask(projectId, taskId, request) {
        const url = `${this.url}/projects/${projectId}/tasks/${taskId}`;
        return this.patch(url, request, this.defaultConfig());
    }
    /**
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param status list tasks with specified statuses. It can be one status or a list of comma-separated status values
     * @param isArchived list archived/not archived tasks for the authorized user. 1 - archived, 0 - not archived
     */
    listUserTasks(limit, offset, status, isArchived) {
        let url = `${this.url}/user/tasks`;
        url = this.addQueryParam(url, 'status', status);
        url = this.addQueryParam(url, 'isArchived', isArchived);
        return this.getList(url, limit, offset);
    }
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @param request request body
     */
    editTaskArchivedStatus(projectId, taskId, request) {
        let url = `${this.url}/user/tasks/${taskId}`;
        url = this.addQueryParam(url, 'projectId', projectId);
        return this.patch(url, request, this.defaultConfig());
    }
}
exports.Tasks = Tasks;
var TasksModel;
(function (TasksModel) {
    let Status;
    (function (Status) {
        Status["TODO"] = "todo";
        Status["IN_PROGRESS"] = "in_progress";
        Status["DONE"] = "done";
        Status["CLOSED"] = "closed";
    })(Status = TasksModel.Status || (TasksModel.Status = {}));
    let Type;
    (function (Type) {
        Type[Type["TRANSLATE"] = 0] = "TRANSLATE";
        Type[Type["PROOFREAD"] = 1] = "PROOFREAD";
    })(Type = TasksModel.Type || (TasksModel.Type = {}));
})(TasksModel = exports.TasksModel || (exports.TasksModel = {}));
