import { CrowdinApi, ResponseList, ResponseObject } from '../core';
export declare class Users extends CrowdinApi {
    /**
     * @param status filter users by status
     * @param search search users by firstName, lastName, username, email
     * @param twoFactor filter users by two-factor authentication status
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     */
    listUsers(status?: UsersModel.Status, search?: string, twoFactor?: UsersModel.TwoFactor, limit?: number, offset?: number): Promise<ResponseList<UsersModel.User>>;
    /**
     * @param userId user identifier
     */
    getUserInfo(userId: number): Promise<ResponseObject<UsersModel.User>>;
    getAuthenticatedUser(): Promise<ResponseObject<UsersModel.User>>;
    listProjectMembers(projectId: number): Promise<ResponseList<UsersModel.ProjectMember>>;
    getMemberInfo(projectId: number, memberId: number): Promise<ResponseObject<UsersModel.ProjectMember>>;
}
export declare namespace UsersModel {
    interface User {
        id: number;
        username: string;
        email: string;
        firstName: string;
        lastName: string;
        status: Status;
        avatarUrl: string;
        createdAt: string;
        lastSeen: string;
        twoFactor: string;
        isAdmin: boolean;
        timezone: string;
    }
    enum Status {
        ACTIVE = "active",
        PENDING = "pending",
        BLOCKED = "blocked"
    }
    enum TwoFactor {
        ENABLED = "enabled",
        DISABLED = "disabled"
    }
    interface ProjectMember {
        id: number;
        username: string;
        fullName: string;
        avatarUrl: string;
        joinedAt: string;
        timezone: string;
    }
}
