"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../core");
class SourceStrings extends core_1.CrowdinApi {
    /**
     * @param projectId project identifier
     * @param fileId file identifier
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param filter filter strings by text and context
     */
    listProjectStrings(projectId, fileId, limit, offset, filter) {
        let url = `${this.url}/projects/${projectId}/strings`;
        url = this.addQueryParam(url, 'fileId', fileId);
        url = this.addQueryParam(url, 'filter', filter);
        return this.getList(url, limit, offset);
    }
    /**
     * @param projectId project identifier
     * @param request request body
     */
    addString(projectId, request) {
        const url = `${this.url}/projects/${projectId}/strings`;
        return this.post(url, request, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param stringId string identifier
     */
    getString(projectId, stringId) {
        const url = `${this.url}/projects/${projectId}/strings/${stringId}`;
        return this.get(url, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param stringId string identifier
     */
    deleteString(projectId, stringId) {
        const url = `${this.url}/projects/${projectId}/strings/${stringId}`;
        return this.delete(url, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param stringId string identifier
     * @param request request body
     */
    editString(projectId, stringId, request) {
        const url = `${this.url}/projects/${projectId}/strings/${stringId}`;
        return this.patch(url, request, this.defaultConfig());
    }
}
exports.SourceStrings = SourceStrings;
var SourceStringsModel;
(function (SourceStringsModel) {
    let Type;
    (function (Type) {
        Type[Type["TEXT"] = 0] = "TEXT";
        Type[Type["ASSET"] = 1] = "ASSET";
        Type[Type["ICU"] = 2] = "ICU";
    })(Type = SourceStringsModel.Type || (SourceStringsModel.Type = {}));
})(SourceStringsModel = exports.SourceStringsModel || (exports.SourceStringsModel = {}));
